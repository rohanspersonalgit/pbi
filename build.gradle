plugins {
    id("org.jetbrains.kotlin.jvm") version "1.4.10"
    id("org.jetbrains.kotlin.kapt") version "1.4.10"
    id("org.jetbrains.kotlin.plugin.allopen") version "1.4.10"
    id("com.github.johnrengelman.shadow") version "6.1.0"
    id("io.micronaut.application") version "1.2.0"
    id("jacoco")
}

version = "0.1"
group = "com.doordash.interview.phone_number_parser"

repositories {
    mavenCentral()
    jcenter()
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.doordash.interview.phone_number_parser.*")
    }
}

dependencies {
    kaptTest("io.micronaut:micronaut-inject-java")
    testImplementation "io.micronaut.test:micronaut-test-kotest:2.2.1"
    testImplementation "io.mockk:mockk:1.10.2"
    testImplementation "io.kotest:kotest-runner-junit5-jvm:4.3.0"
    implementation("io.micronaut:micronaut-validation")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
    implementation("io.micronaut:micronaut-runtime")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-http-client")
    implementation("org.apache.logging.log4j:log4j-core:2.12.1")
    runtimeOnly("org.apache.logging.log4j:log4j-api:2.12.1")
    runtimeOnly("org.apache.logging.log4j:log4j-slf4j-impl:2.12.1")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")

    testImplementation("org.testcontainers:testcontainers:1.17.2")
    testImplementation("org.testcontainers:junit-jupiter:1.17.2")
    testImplementation("io.strikt:strikt-core:0.28.1")
    implementation("io.micronaut.redis:micronaut-redis-lettuce")
    testCompile "io.micronaut.test:micronaut-test-junit5:1.2.0"
    testCompile "org.mockito:mockito-junit-jupiter:2.22.0"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:5.1.0"
}


application {
    mainClass.set("com.doordash.interview.phone_number_parser.ApplicationKt")
}

java {
    sourceCompatibility = JavaVersion.toVersion("11")
}

check {
    dependsOn jacocoTestCoverageVerification
}
jacocoTestReport {
    dependsOn test
}
jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.outputLocation.set(layout.buildDirectory.dir("jacocoHtml"))
    }
}
test {
    useJUnitPlatform()
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.9
            }
        }
        rule {
            element = 'CLASS'
            excludes = ['com.doordash.interview.phone_number_parser.Application']
            limit {
                minimum = 0.9
            }
        }
    }
}

tasks {
    compileKotlin {
        kotlinOptions {
            jvmTarget = "11"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "11"
        }
    }
}

